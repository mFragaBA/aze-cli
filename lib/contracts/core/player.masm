use.miden::contracts::wallets::basic->basic_wallet
use.miden::contracts::auth::basic->basic_eoa
use.miden::account
use.miden::tx

const.G=7
const.SECRET_KEY_SLOT=53
const.PUBLIC_KEY_SLOT=54
const.MASKING_FACTOR_SLOT=55
const.PLAYER_DATA_SLOT=56
const.PHASE_DATA_SLOT=57
const.REQUESTER_INFO_SLOT=102
const.TOTAL_CARDS=52
const.SUIT_SIZE=13

export.receive_cards
    exec.account::set_item
    # => [R, V]
    # drop the root
    dropw 
end

#! Generates the public key, i.e., a group element H given a random scalar representing the private key.
#! The private key is expected as input and is a random field element.
#!
#! Input: [r, ...]
#! Output: [G^r, ...]
export.gen_privatekey
    push.SECRET_KEY_SLOT exec.account::get_item
    drop drop drop
    # Check that 2 < r. The bound r < p is trivial.
    dup push.2 gt assert
    push.G swap exp
    # => [G^r]

    padw drop push.PUBLIC_KEY_SLOT
    # => [PUBLIC_KEY_SLOT, 0, 0, 0, G^r]
    exec.account::set_item
    dropw dropw
end

#! Given a random scalar r on the stack, computes the first point Ca of the cyphertext.
#! Ca is computed using Ca = r*G, G is the generator of the multiplicative cyclic group.
#! In multiplicative notation this is equivalent to Ca = G^r.
#!
export.encrypt_ca
    push.MASKING_FACTOR_SLOT exec.account::get_item
    drop drop drop
    # => [masking_factor]
    dup push.1 gt assert
    push.G swap exp
end

#! Given public key, point H generated using gen_privatekey as a field element and message M,
#! also a field element, and a random scalar r on stack, again a field element, this routine
#! computes the second point Cb of the ciphertext as Cb = M + r*H. In multiplicative notation
#! it will be Cb = H^r * M
#!
export.encrypt_cb
    # => [card_plaintext M]
    push.MASKING_FACTOR_SLOT exec.account::get_item
    drop drop drop
    # => [masking_factor, M]
    push.PUBLIC_KEY_SLOT exec.account::get_item
    drop drop drop
    # => [public_key, masking_factor, M]
    swap
    # Check that 1 < r.
    dup push.1 gt assert
    exp
    mul 
end

export.encrypt_shuffle
    # => [card_plaintext]
    loc_store.0
    exec.encrypt_ca
    # => [ca]
    loc_store.1 loc_load.0
    exec.encrypt_cb
    # => [cb]
    loc_load.1
    # => [ca, cb]
    swap push.0 dup
    # => [0, 0, cb, ca]

    # Shuffle
    loc_load.0
    # => [pre_shuffle_index, 0, 0, cb, ca]
    push.MASKING_FACTOR_SLOT exec.account::get_item 
    drop drop drop
    # => [mf, pre_shuffle_index, 0, 0, cb, ca]
    add
    # => [post_shuffle_index, 0, 0, cb, ca]
    dup push.TOTAL_CARDS gt

    while.true
        push.TOTAL_CARDS sub
        dup push.TOTAL_CARDS gt
    end
    # => [post_shuffle_index, 0, 0, cb, ca]

    exec.account::set_item
    dropw dropw
end

export.remask_ca
    # => [Ca]
    push.MASKING_FACTOR_SLOT exec.account::get_item
    drop drop drop
    # => [masking_factor, Ca]
    dup push.1 gt assert
    push.G swap exp mul
    # => [Ca']
end

export.remask_cb
    # => [Cb]
    push.MASKING_FACTOR_SLOT exec.account::get_item
    drop drop drop
    # => [masking_factor, Cb]
    push.PUBLIC_KEY_SLOT exec.account::get_item
    drop drop drop
    # => [H, r, Cb]
    swap
    # Check that 1 < r.
    dup push.1 gt assert
    exp
    mul 
end

export.remask_shuffle
    # => [card_index, ca, cb]
    loc_store.0
    # => [ca, cb]
    exec.remask_ca
    # => [ca', cb]
    loc_store.1
    # => [cb]
    exec.remask_cb
    # => [cb']
    loc_load.1
    # => [ca', cb']
    swap push.0 dup
    # => [0, 0, cb', ca']

    # Shuffle
    loc_load.0
    # => [pre_shuffle_index, 0, 0, cb', ca']
    push.MASKING_FACTOR_SLOT exec.account::get_item 
    drop drop drop
    # => [mf, pre_shuffle_index, 0, 0, cb', ca']
    add
    # => [post_shuffle_index, 0, 0, cb, ca]
    dup push.TOTAL_CARDS gt

    while.true
        push.TOTAL_CARDS sub
        dup push.TOTAL_CARDS gt
    end
    # => [post_shuffle_index, 0, 0, cb, ca]

    exec.account::set_item
    dropw dropw
end

export.set_player_data
    # => [p4, p3, p2, action_type]
    push.PLAYER_DATA_SLOT exec.account::set_item
    dropw dropw 
end

export.set_requester_data
    # => [0, 0, 0, requester_id]
    push.REQUESTER_INFO_SLOT exec.account::set_item
    dropw dropw 
end

export.unmask
    # => [card_index, ca, cb]
    swap inv
    # => [ca_inv, card_index, cb]
    push.SECRET_KEY_SLOT exec.account::get_item
    drop drop drop
    # => [sk, ca_inv, card_index, cb]
    exp
    # => [ca_inv^sk, card_index, cb]
    movup.2 mul
    # => [M, card_index]
    padw drop movup.4
    # => [card_index, 0, 0, 0, M]
    exec.account::set_item
    dropw dropw
end

export.inter_unmask
    # => [card_index, ca', cb']
    swap push.G inv
    # => [G_inv, ca', card_index, cb']
    push.MASKING_FACTOR_SLOT exec.account::get_item
    drop drop drop
    # => [r, G_inv, ca', card_index, cb']
    exp
    # => [G_inv^r, ca', card_index, cb']
    mul
    # => [ca, card_index, cb']
    movup.2 push.PUBLIC_KEY_SLOT exec.account::get_item
    drop drop drop
    # => [H, cb', ca, card_index]
    inv push.MASKING_FACTOR_SLOT exec.account::get_item
    drop drop drop
    # => [r, H_inv, cb', ca, card_index]
    exp mul
    # => [cb, ca, card_index]
    push.0 dup movup.4
    # => [card_index, 0, 0, cb, ca]
    exec.account::set_item
    dropw dropw
end

export.set_cards
    # => [card_index, Cb, Ca]
    push.0 dup movup.2
    # => [card_index, 0, 0, Cb, Ca]
    exec.account::set_item
    dropw dropw
end

export.set_phase
    # => [0, 0, 0, current_phase]
    push.PHASE_DATA_SLOT exec.account::set_item
    dropw dropw 
end

export.increment_action_type
    push.PLAYER_DATA_SLOT exec.account::get_item
    # => [p4, p3, p2, action_type]
    movup.3 add.4 movdn.3
    push.PLAYER_DATA_SLOT exec.account::set_item
    dropw dropw 
end

export.tx_state_change
    push.253 exec.account::get_item
    add.1
    push.253 exec.account::set_item
    dropw dropw
end

export.basic_wallet::receive_asset
export.basic_wallet::send_asset
export.basic_eoa::auth_tx_rpo_falcon512
export.tx::create_note
